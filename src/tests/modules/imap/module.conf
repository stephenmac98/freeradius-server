#IMAP unit test config

# testdir      = $ENV{TESTDIR}
# output       = $ENV{OUTPUT}
# run_dir      = ${output}
# raddb        = raddb
# pidfile      = ${run_dir}/radiusd.pid
# panic_action = "gdb -batch -x src/tests/panic.gdb %e %p > ${run_dir}/gdb.log 2>&1; cat ${run_dir}/gdb.log"

maindir      = ${raddb}
# radacctdir   = ${run_dir}/radacct
# modconfdir   = ${maindir}/mods-config
certdir      = ${maindir}/certs
cadir        = ${maindir}/certs
# test_port    = $ENV{TEST_PORT}

imap {
	imap_uri = "127.0.0.1:1432"
	timeout = 1000

	tls {
                #
                #  .Certificate validation options
                #
                #  Specifies how the certificate(s) presented by the HTTPS server being contacted
                #  are validated, and which certificates (if any) to send to the HTTPS server.
                #

                #
                #  ca_file:: PEM formatted file containing the chain to validate the HTTPS server's cert
                #
                #  Should usually contain a concatenation of one or more intermediary CA
                #  files, shallowest (i.e. the one that signed the HTTPS server's cert) first, and
                #  deepest (the root CA) last.
                #
                #  Providing a complete certificate chain here is the most common way of validating
                #  the certificate presented by a HTTPS server.
                #
#               ca_file              = "${certdir}/cacert.pem"

                #
                #  ca_issuer_file:: PEM formatted file containing the CA that signed the HTTPS server's cert
                #
                #  Specifies the certificate that directly signed the certificate presented by the
                #  HTTPS server.
                #
                #  This configuration option can be used to prevent certificates passing validation that
                #  were signed by other intermediary CAs or root CAs in the trusted certificate chain.
                #
#               ca_issuer_file     = "${certdir}/rsa/ca.pem"

                #
                #  ca_path:: A directory containing multiple root CA certs named by their hash
                #
                #  See the OpenSSL documentation for more details:
                #  - https://www.openssl.org/docs/man1.1.0/man3/SSL_CTX_set_default_verify_paths.html
                #  - https://www.openssl.org/docs/man1.1.1/man1/c_rehash.html
                #
                #  This configuration option should only be used when the HTTPS server being contacted
                #  is not known ahead of time (using a URL from an external source), and/or the CA used
                #  to sign the HTTPS server certificate is unknown.
                #
               ca_path              = "${certdir}"

                #
                #  certificate_file:: PEM formatted file containing the certificate we present to the HTTPS server
                #
                #  Specifies a certificate and any intermediary CAs we should send to the HTTPS server.
                #
                #  This file should usually contain the client certificate file first, then any
                #  intermediary signing CAs, shallowest (direct signee of the certificate_file)
                #  to deepest (signed directly by the root CA).
                #
               certificate_file     = "${certdir}/rsa/client.pem"

                #
                #  private_key_file:: PEM formatted file containing the private key for the specified certificate_file
                #
                #  Must be specified if certificate_file is being used.
                #
               private_key_file     = "${certdir}/rsa/client.key"


                #
                #  private_key_password:: Password used to decrypt the private key file.
                #
                #  Should only be specified in the private_key_file is encrypted.
                #
#               private_key_password = "supersecret"

                #
                #  random_file:: Source of random data used for various cryptographic functions.
                #
               random_file          = /dev/urandom

                #
                #  check_cert:: Server certificate verification requirements.
                #
		#  May be one of:
                #
                #  [options="header,autowidth"]
                #  |===
                #  | Option | Description
                #  | `no`   | Server certificate CN can be any value.
                #  | `yes`  | Server certificate CN matches the host in the URI.
                #  |===
                #
                #  Default is `yes`
                #
#               check_cert_cn = no

                #
                #  extract_cert_attrs:: Extract OIDs from presented certificates as OIDs.
                #
                #  Default is `no`
                #
               extract_cert_attrs = yes
        }
	
}





